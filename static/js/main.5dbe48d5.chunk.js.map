{"version":3,"sources":["img/TomatoTimer.png","audio/old-clock.wav","components/Footer.js","components/Header.js","actions/timer.js","actions/types.js","components/Durations.js","actions/duration.js","components/SmallScreenButtons.js","components/essentialFunctions.js","components/Buttons.js","components/Timer.js","constants/constants.js","components/TodayTimer.js","components/MainContent.js","App.js","serviceWorker.js","reducers/durationReducer.js","reducers/timerReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["module","exports","Footer","Header","to","src","tomatoTimerImg","alt","updateTimer","displayTime","type","payload","updateMode","newMode","setRemainingTime","newMin","newSec","stopTimer","delay","stopTimerAndUpdateDisplay","mapDispatchToProps","setPomodoro","minute","setShortBreak","setLongBreak","connect","state","durations","timer","props","currentMode","pomodoroMins","shortBreakMins","longBreakMins","useState","pomodoroDuration","shortBreakDuration","longBreakDuration","durationSettings","setDuration","handleChange","e","target","name","parseInt","value","console","log","useEffect","className","onSubmit","preventDefault","htmlFor","placeholder","onChange","onClick","playAudio","Howl","clockSound","play","setTimerStatus","paused","startTimer","incrementTodayTimerCount","currentTodayTimerCount","remainingMin","remainingSec","todayTimerCount","callback","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","min","sec","formattedSecond","slice","displayInitialPomo","displayTimeDesc","displayInitialTimeByMode","MainContent","App","path","exact","Boolean","window","location","hostname","match","initialState","durationReducer","action","timerReducer","rootReducer","combineReducers","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5dbe48d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TomatoTimer.fadd6c36.png\";","module.exports = __webpack_public_path__ + \"static/media/old-clock.e4ea3107.wav\";","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <p>YXG 2021 &copy; All Rights Reserved</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport tomatoTimerImg from '../img/TomatoTimer.png';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <Link to='/'>\r\n        <img src={tomatoTimerImg} alt='' />\r\n        <h1>Pomodoro V1</h1>\r\n      </Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import {\r\n  DISPLAY_POMO_INITIAL,\r\n  INCREMENT_TODAY_TIMER,\r\n  PAUSE_POMO,\r\n  SET_REMAINING_TIME,\r\n  START_POMO,\r\n  START_TIMER,\r\n  STOP_TIMER,\r\n  STOP_TIMER_AND_UPDATE_DISPLAY,\r\n  UPDATE_MODE,\r\n} from './types';\r\n\r\n// export const updateTimer = (displayTime) => (dispatch) => {\r\n//   // some timer stuff\r\n//   // payload is min, sec\r\n//   dispatch({ type: START_POMO, payload: displayTime });\r\n// };\r\n\r\nexport const updateTimer = (displayTime) => ({\r\n  type: START_POMO,\r\n  payload: displayTime,\r\n});\r\n\r\nexport const displayInitialPomo = (displayTimeDesc, displayTime) => ({\r\n  type: DISPLAY_POMO_INITIAL,\r\n  payload: { displayTimeDesc, displayTime },\r\n});\r\n\r\nexport const updateMode = (newMode) => ({\r\n  type: UPDATE_MODE,\r\n  payload: newMode,\r\n});\r\n\r\nexport const setRemainingTime = (newMin, newSec) => ({\r\n  type: SET_REMAINING_TIME,\r\n  payload: { newMin, newSec },\r\n});\r\n\r\nexport const setTimerStatus = (paused) => ({\r\n  type: PAUSE_POMO,\r\n  payload: !paused,\r\n});\r\n\r\nexport const startTimer = (delay = 1000) => ({\r\n  type: START_TIMER,\r\n  payload: delay,\r\n});\r\n\r\nexport const stopTimer = (delay = null) => ({\r\n  type: STOP_TIMER,\r\n  payload: delay,\r\n});\r\n\r\nexport const stopTimerAndUpdateDisplay = (displayTime, delay = null) => ({\r\n  type: STOP_TIMER_AND_UPDATE_DISPLAY,\r\n  payload: { displayTime, delay },\r\n});\r\n\r\nexport const incrementTodayTimerCount = (currentTodayTimerCount) => ({\r\n  type: INCREMENT_TODAY_TIMER,\r\n  payload: currentTodayTimerCount + 1,\r\n});\r\n","// Actions\r\nexport const START_POMO = 'START_POMO';\r\nexport const STOP_POMO = 'STOP_POMO';\r\nexport const SET_POMO = 'SET_POMO';\r\nexport const SET_SHORT_BREAK = 'SET_SHORT_BREAK';\r\nexport const SET_LONG_BREAK = 'SET_LONG_BREAK';\r\nexport const DISPLAY_POMO_INITIAL = 'DISPLAY_POMO_INITIAL';\r\nexport const SET_REMAINING_TIME = 'SET_REMAINING_TIME';\r\nexport const PAUSE_POMO = 'PAUSE_POMO';\r\n// Mode actions\r\nexport const UPDATE_MODE = 'UPDATE_MODE';\r\n// Start and Stop Timer Actions\r\nexport const START_TIMER = 'START_TIMER';\r\nexport const STOP_TIMER = 'STOP_TIMER';\r\nexport const STOP_TIMER_AND_UPDATE_DISPLAY = 'STOP_TIMER_AND_UPDATE_DISPLAY';\r\nexport const INCREMENT_TODAY_TIMER = 'INCREMENT_TODAY_TIMER';\r\n\r\n// Modes\r\nexport const POMO_MODE = 'POMO_MODE';\r\nexport const SHORT_BREAK_MODE = 'SHORT_BREAK_MODE';\r\nexport const LONG_BREAK_MODE = 'LONG_BREAK_MODE';\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setLongBreak, setPomodoro, setShortBreak } from '../actions/duration';\r\nimport {\r\n  setRemainingTime,\r\n  stopTimer,\r\n  stopTimerAndUpdateDisplay,\r\n  updateMode,\r\n  updateTimer,\r\n} from '../actions/timer';\r\nimport { LONG_BREAK_MODE, POMO_MODE, SHORT_BREAK_MODE } from '../actions/types';\r\n\r\nfunction Durations(props) {\r\n  // Props\r\n  const {\r\n    timer: { currentMode, delay },\r\n    durations: { pomodoroMins, shortBreakMins, longBreakMins },\r\n    updateMode,\r\n    setPomodoro,\r\n    setShortBreak,\r\n    setLongBreak,\r\n    updateTimer,\r\n    setRemainingTime,\r\n    stopTimerAndUpdateDisplay,\r\n  } = props;\r\n\r\n  // form States\r\n  const [durationSettings, setDuration] = useState({\r\n    pomodoroDuration: 25,\r\n    shortBreakDuration: 5,\r\n    longBreakDuration: 10,\r\n  });\r\n  // destructure settings\r\n  const {\r\n    pomodoroDuration,\r\n    shortBreakDuration,\r\n    longBreakDuration,\r\n  } = durationSettings;\r\n\r\n  // handle Change in Input\r\n  const handleChange = (e) => {\r\n    setDuration({\r\n      ...durationSettings,\r\n      [e.target.name]: parseInt(e.target.value),\r\n    });\r\n    console.log(\r\n      'form',\r\n      pomodoroDuration,\r\n      shortBreakDuration,\r\n      longBreakDuration\r\n    );\r\n    console.log('state', pomodoroMins, shortBreakMins, longBreakMins);\r\n  };\r\n\r\n  // handle Submit function\r\n  const handleSubmit = (e) => {\r\n    console.log(currentMode);\r\n    e.preventDefault();\r\n    setPomodoro(pomodoroDuration);\r\n    setShortBreak(shortBreakDuration);\r\n    setLongBreak(longBreakDuration);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Change Display Time when press save button if not running\r\n    if (delay === null) {\r\n      switch (currentMode) {\r\n        case POMO_MODE:\r\n          updateTimer(`${pomodoroMins}:00`);\r\n          setRemainingTime(pomodoroMins, 0);\r\n          break;\r\n        case SHORT_BREAK_MODE:\r\n          console.log('Anything called');\r\n          updateTimer(`${shortBreakMins}:00`);\r\n          setRemainingTime(shortBreakMins, 0);\r\n          break;\r\n        case LONG_BREAK_MODE:\r\n          updateTimer(`${longBreakMins}:00`);\r\n          setRemainingTime(longBreakMins, 0);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }, [shortBreakMins, longBreakMins, pomodoroMins]);\r\n\r\n  // Component\r\n  return (\r\n    <div className='durations gt'>\r\n      <h2>Durations (Mins)</h2>\r\n      <form className='duration-form' onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='timer'>Timer</label>\r\n          <input\r\n            type='number'\r\n            placeholder='time'\r\n            name='pomodoroDuration'\r\n            value={pomodoroDuration}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='short'>Short Break</label>\r\n          <input\r\n            type='number'\r\n            placeholder='short'\r\n            name='shortBreakDuration'\r\n            value={shortBreakDuration}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='long'>Long Break</label>\r\n          <input\r\n            type='number'\r\n            placeholder='long'\r\n            name='longBreakDuration'\r\n            value={longBreakDuration}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <button className='save-duration'>Save</button>\r\n      </form>\r\n      <div className='timer-options'>\r\n        <button\r\n          onClick={() => {\r\n            // stopTimer();\r\n            stopTimerAndUpdateDisplay(`${pomodoroMins}:00`);\r\n            updateMode(POMO_MODE);\r\n            setRemainingTime(pomodoroMins, 0);\r\n          }}\r\n        >\r\n          Timer\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            // stopTimer();\r\n            stopTimerAndUpdateDisplay(`${shortBreakMins}:00`);\r\n            updateMode(SHORT_BREAK_MODE);\r\n            setRemainingTime(shortBreakMins, 0);\r\n          }}\r\n        >\r\n          Short Break\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            // stopTimer();\r\n            stopTimerAndUpdateDisplay(`${longBreakMins}:00`);\r\n            updateMode(LONG_BREAK_MODE);\r\n            setRemainingTime(longBreakMins, 0);\r\n          }}\r\n        >\r\n          Long Break\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  durations: state.durations,\r\n  timer: state.timer,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  updateMode,\r\n  setPomodoro,\r\n  setShortBreak,\r\n  setLongBreak,\r\n  stopTimer,\r\n  updateTimer,\r\n  setRemainingTime,\r\n  stopTimerAndUpdateDisplay,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Durations);\r\n","import { SET_LONG_BREAK, SET_POMO, SET_SHORT_BREAK } from './types';\r\n\r\nexport const setPomodoro = (minute) => ({\r\n  type: SET_POMO,\r\n  payload: minute,\r\n});\r\n\r\nexport const setShortBreak = (minute) => ({\r\n  type: SET_SHORT_BREAK,\r\n  payload: minute,\r\n});\r\n\r\nexport const setLongBreak = (minute) => ({\r\n  type: SET_LONG_BREAK,\r\n  payload: minute,\r\n});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  setRemainingTime,\r\n  stopTimerAndUpdateDisplay,\r\n  updateMode,\r\n} from '../actions/timer';\r\nimport { LONG_BREAK_MODE, POMO_MODE, SHORT_BREAK_MODE } from '../actions/types';\r\n\r\nfunction SmallScreenButtons(props) {\r\n  const {\r\n    updateMode,\r\n    setRemainingTime,\r\n    stopTimerAndUpdateDisplay,\r\n    durations: { pomodoroMins, shortBreakMins, longBreakMins },\r\n  } = props;\r\n  return (\r\n    <div className='small-timer-options'>\r\n      <button\r\n        onClick={() => {\r\n          // stopTimer();\r\n          stopTimerAndUpdateDisplay(`${pomodoroMins}:00`);\r\n          updateMode(POMO_MODE);\r\n          setRemainingTime(pomodoroMins, 0);\r\n        }}\r\n      >\r\n        Timer\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          // stopTimer();\r\n          stopTimerAndUpdateDisplay(`${shortBreakMins}:00`);\r\n          updateMode(SHORT_BREAK_MODE);\r\n          setRemainingTime(shortBreakMins, 0);\r\n        }}\r\n      >\r\n        Short Break\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          // stopTimer();\r\n          stopTimerAndUpdateDisplay(`${longBreakMins}:00`);\r\n          updateMode(LONG_BREAK_MODE);\r\n          setRemainingTime(longBreakMins, 0);\r\n        }}\r\n      >\r\n        Long Break\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  durations: state.durations,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  updateMode,\r\n  setRemainingTime,\r\n  stopTimerAndUpdateDisplay,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SmallScreenButtons);\r\n","import { Howl } from 'howler';\r\nimport clockSound from '../audio/old-clock.wav';\r\nfunction playAudio() {\r\n  var sound = new Howl({\r\n    src: [clockSound],\r\n  });\r\n  sound.play();\r\n  console.log('clicked');\r\n}\r\n\r\nexport default playAudio;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  incrementTodayTimerCount,\r\n  setRemainingTime,\r\n  setTimerStatus,\r\n  startTimer,\r\n  stopTimer,\r\n  updateTimer,\r\n} from '../actions/timer';\r\nimport { POMO_MODE } from '../actions/types';\r\nimport playAudio from './essentialFunctions';\r\n\r\nfunction Buttons(props) {\r\n  const {\r\n    startTimer,\r\n    stopTimer,\r\n    updateTimer,\r\n    setRemainingTime,\r\n    incrementTodayTimerCount,\r\n\r\n    timer: { remainingMin, remainingSec, delay, todayTimerCount, currentMode },\r\n  } = props;\r\n\r\n  useInterval((min = remainingMin, sec = remainingSec) => {\r\n    console.log('wtf');\r\n\r\n    if (min > 0 || sec > 0) {\r\n      if (min !== 0 && sec === 0) {\r\n        sec = 60;\r\n        min--;\r\n      }\r\n      sec--;\r\n      let formattedSecond = ('0' + sec).slice(-2);\r\n\r\n      updateTimer(`${min}:${formattedSecond}`);\r\n      setRemainingTime(min, sec);\r\n      if (min === 0 && sec === 0) {\r\n        console.log('play audio');\r\n        playAudio();\r\n        if (currentMode === POMO_MODE) {\r\n          incrementTodayTimerCount(todayTimerCount);\r\n        }\r\n        // clearInterval(runningTimer);\r\n      }\r\n    }\r\n  }, delay);\r\n\r\n  // Use interval function\r\n  return (\r\n    <div className='buttons'>\r\n      <button\r\n        className='stop-button button'\r\n        onClick={() => {\r\n          // stopTimer(remainingMin, remainingSec);\r\n          // stopFunction();\r\n          stopTimer();\r\n        }}\r\n      >\r\n        STOP\r\n      </button>\r\n      <button\r\n        className='start-button button'\r\n        onClick={() => {\r\n          startTimer();\r\n        }}\r\n      >\r\n        Start\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  durations: state.durations,\r\n  timer: state.timer,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  updateTimer,\r\n  setRemainingTime,\r\n  setTimerStatus,\r\n  startTimer,\r\n  stopTimer,\r\n  incrementTodayTimerCount,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Buttons);\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback\r\n  useEffect(() => {\r\n    console.log('UseInterval useEffect');\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval\r\n  useEffect(() => {\r\n    function tick() {\r\n      console.log('funciton tick');\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      console.log('inside the if');\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport tomatoTimerImg from '../img/TomatoTimer.png';\r\nimport Buttons from './Buttons';\r\nimport { connect } from 'react-redux';\r\nimport { LONG_BREAK_MODE, POMO_MODE, SHORT_BREAK_MODE } from '../actions/types';\r\nimport { displayInitialPomo } from '../actions/timer';\r\nimport { LONG_BREAK, POMODORO, SHORT_BREAK } from '../constants/constants';\r\nfunction Timer(props) {\r\n  // displayTimeByMode Function\r\n\r\n  // take from props\r\n  const {\r\n    timer: { displayTimeDesc, displayTime, currentMode },\r\n    durations: { pomodoroMins, shortBreakMins, longBreakMins },\r\n    displayInitialPomo,\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    const displayInitialTimeByMode = (currentMode) => {\r\n      const initialSecond = `00`;\r\n\r\n      switch (currentMode) {\r\n        case POMO_MODE:\r\n          //   Format second to 2 digit\r\n          displayInitialPomo(POMODORO, `${pomodoroMins}:${initialSecond}`);\r\n          break;\r\n        case SHORT_BREAK_MODE:\r\n          displayInitialPomo(SHORT_BREAK, `${shortBreakMins}:${initialSecond}`);\r\n          break;\r\n        case LONG_BREAK_MODE:\r\n          displayInitialPomo(LONG_BREAK, `${longBreakMins}:${initialSecond}`);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    displayInitialTimeByMode(currentMode);\r\n  }, [currentMode, displayInitialPomo]);\r\n\r\n  // My New Test\r\n\r\n  return (\r\n    <div className='timer gt'>\r\n      <h3 className='timer-desc'>{displayTimeDesc}</h3>\r\n      <h3 className='display-time'>{displayTime}</h3>\r\n      <img src={tomatoTimerImg} alt='Tomato Timer' />\r\n      <Buttons />\r\n      <h2 className='quote'>KEEP GOING, STAY PRODUCTIVE</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  timer: state.timer,\r\n  durations: state.durations,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  displayInitialPomo,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\r\n","// Titles\r\nexport const POMODORO = 'POMODORO';\r\nexport const SHORT_BREAK = 'SHORT BREAK';\r\nexport const LONG_BREAK = 'LONG BREAK';\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction TodayTimer(props) {\r\n  const {\r\n    timer: { todayTimerCount },\r\n  } = props;\r\n  return (\r\n    <div className='today-timer gt'>\r\n      <h2>Today's Timer</h2>\r\n      <h3>(Dont Refresh)</h3>\r\n      <div className='total-timer'>{todayTimerCount}</div>\r\n      <h3>Keep going, not too late</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  timer: state.timer,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TodayTimer);\r\n","import React from 'react';\r\nimport Durations from './Durations';\r\nimport SmallScreenButtons from './SmallScreenButtons';\r\nimport Timer from './Timer';\r\nimport TodayTimer from './TodayTimer';\r\n\r\nfunction MainContent() {\r\n  return (\r\n    <main className='contents'>\r\n      <Durations />\r\n      <Timer />\r\n      <TodayTimer />\r\n      <SmallScreenButtons />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default MainContent;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Footer from \"./components/Footer\";\r\nimport Header from \"./components/Header\";\r\nimport MainContent from \"./components/MainContent\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport SmallScreenButtons from \"./components/SmallScreenButtons\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Route path=\"/\" exact>\r\n          <div className=\"container\">\r\n            <Header />\r\n            <MainContent />\r\n            {/* <SmallScreenButtons /> */}\r\n          </div>\r\n          <Footer />\r\n        </Route>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// hey\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SET_LONG_BREAK, SET_POMO, SET_SHORT_BREAK } from '../actions/types';\r\n\r\nconst initialState = {\r\n  pomodoroMins: 25,\r\n  shortBreakMins: 5,\r\n  longBreakMins: 10,\r\n};\r\n\r\nconst durationReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_POMO:\r\n      // payload is mins\r\n      return { ...state, pomodoroMins: payload };\r\n\r\n    case SET_SHORT_BREAK:\r\n      return { ...state, shortBreakMins: payload };\r\n\r\n    case SET_LONG_BREAK:\r\n      return { ...state, longBreakMins: payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default durationReducer;\r\n","import {\r\n  DISPLAY_POMO_INITIAL,\r\n  POMO_MODE,\r\n  SET_REMAINING_TIME,\r\n  START_POMO,\r\n  PAUSE_POMO,\r\n  UPDATE_MODE,\r\n  START_TIMER,\r\n  STOP_TIMER,\r\n  STOP_TIMER_AND_UPDATE_DISPLAY,\r\n  INCREMENT_TODAY_TIMER,\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  displayTimeDesc: 'POMODORO',\r\n  displayTime: '25:00',\r\n  currentMode: POMO_MODE,\r\n  remainingMin: 25,\r\n  remainingSec: 0,\r\n  paused: true,\r\n  delay: null,\r\n  todayTimerCount: 0,\r\n};\r\n\r\nconst timerReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case START_POMO:\r\n      // Start the timer\r\n      return { ...state, displayTime: payload, paused: false };\r\n\r\n    case DISPLAY_POMO_INITIAL:\r\n      // Used to display initial Time before starting\r\n      const { displayTimeDesc, displayTime } = payload;\r\n      return { ...state, displayTimeDesc, displayTime };\r\n    // Update to change mode\r\n    case UPDATE_MODE:\r\n      return { ...state, currentMode: payload };\r\n\r\n    case SET_REMAINING_TIME:\r\n      // keep setting the remaining time, so it can be paused\r\n      const { newMin, newSec } = payload;\r\n      return { ...state, remainingMin: newMin, remainingSec: newSec };\r\n\r\n    case PAUSE_POMO:\r\n      return { ...state, paused: true };\r\n    case START_TIMER:\r\n      // payload is delay\r\n      return { ...state, delay: payload };\r\n    case STOP_TIMER:\r\n      // payload is delay\r\n      return { ...state, delay: payload };\r\n    case STOP_TIMER_AND_UPDATE_DISPLAY:\r\n      return {\r\n        ...state,\r\n        displayTime: payload.displayTime,\r\n        delay: payload.delay,\r\n      };\r\n    case INCREMENT_TODAY_TIMER:\r\n      return { ...state, todayTimerCount: payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default timerReducer;\r\n","import { combineReducers } from 'redux';\r\nimport durationReducer from './durationReducer';\r\nimport timerReducer from './timerReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  timer: timerReducer,\r\n  durations: durationReducer,\r\n});\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport thunk from 'redux-thunk';\r\n// rootReducer\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}